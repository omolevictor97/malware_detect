import pandas as pd
import numpy as np
import pickle
import streamlit as st
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Reading dataset
df = pd.read_csv('malware.csv', sep='|')
df.drop(['Name', 'md5'], axis=1, inplace=True)

X = df.drop('legitimate', axis=1)
y = df.legitimate


cols = ['Machine', 'SizeOfOptionalHeader', 'MajorSubsystemVersion', 'Subsystem',
       'DllCharacteristics', 'SizeOfStackReserve', 'SectionsMeanEntropy',
       'SectionsMaxEntropy', 'ResourcesMaxEntropy', 'VersionInformationSize']
X = X[cols]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y, shuffle=True)

scaler = StandardScaler()

X_train_transformed = scaler.fit_transform(X_train)
X_test_transformed = scaler.transform(X_test)



with open('malware.pkl', 'rb') as model:
    model = pickle.load(model)



st.title('malware detection app')
with st.sidebar:
    st.markdown('<h2 style="background-color:tomato; color:blue; font-size:24px; font-weight:bold"> <center> Welcome to our mvp </center></h2> <br>', unsafe_allow_html=True)
    st.image('malware.jpeg')

def inputs():
    try:
        Machine = st.number_input("Machine number", min_value=332.00, max_value=35000.00)
        SOFH = st.number_input('Size Of Option Header', min_value=224.00, max_value=2400000.00)
        MajorSubsystemVersion = st.number_input('major subsystem version', min_value=1.00, max_value=10.0)
        Subsystem = st.number_input('subsystem', min_value=1.00, max_value=16.00)
        DllCharacteristics = st.number_input('Dll Characteristics', min_value=0.00, max_value=50000.00)
        SizeOfStackReserve = st.number_input('Size Of Stack Reserve', min_value=0.00, max_value= 40000000.00)
        SectionsMeanEntropy = st.number_input('Sections Mean Entropy', min_value=0.50, max_value= 8.00)
        SectionsMaxEntropy = st.number_input('Sections Max Entropy', min_value=1.50, max_value= 8.00)
        ResourcesMaxEntropy =  st.number_input('Resources Max Entropy', min_value=0.00, max_value= 8.00)
        VersionInformationSize =  st.number_input('Version Information Size', min_value=0.00, max_value= 25.0)

        lists = [Machine, SOFH, MajorSubsystemVersion, Subsystem, DllCharacteristics,
        SizeOfStackReserve, SectionsMeanEntropy, SectionsMaxEntropy, ResourcesMaxEntropy, VersionInformationSize]
        data = np.array([lists])
        return data
    except Exception as E:
        return str(E)
if __name__ == "__main__":
    data = inputs()
    df = pd.DataFrame(data, columns=cols)
    st.write(df)

    scaled_df = scaler.transform(df)
    if st.button('predict'):
        preds = model.predict(scaled_df)[0]
        if preds == 1:
            st.write('The signal received is legitimate')
        else:
            st.write('The signal received is illegitimate')

